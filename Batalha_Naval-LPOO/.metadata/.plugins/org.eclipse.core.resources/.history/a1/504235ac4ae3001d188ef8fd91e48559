package upe.poli.games;


import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Scanner;

import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;

import upe.poli.games.GUI.JanelaJogo;
import upe.poli.games.GUI.PosicionarNaviosGUI;
import upe.poli.games.GUI.TabuleiroGUI;


public class Jogador 
{
    private String nome;
    private Tabuleiro grelhaDeDefesa;
    private Tabuleiro grelhaDeAtaque;
    private Navio[] navios;
    private boolean[] naviosPosicionados;
	private int size;
	private TabuleiroGUI defesaGUI;
	private TabuleiroGUI ataqueGUI;
	private JanelaJogo janelaJogo;
	private PosicionarNaviosGUI posicionarGUI;
	private int numVitorias;
	
	

    public Jogador(String nome, int size, Navio[] navios) {
        this.nome = nome;
        this.size=size;
        this.navios = navios; 
        this.naviosPosicionados = new boolean[navios.length];
        
        this.grelhaDeDefesa = new Tabuleiro(size);
        this.grelhaDeAtaque = new Tabuleiro(size);
        this.posicionarGUI = new PosicionarNaviosGUI(size);
        this.defesaGUI = new TabuleiroGUI(grelhaDeDefesa, nome, "Defesa");
        this.ataqueGUI = new TabuleiroGUI(grelhaDeAtaque, nome, "Ataque");
        this.janelaJogo = new JanelaJogo (defesaGUI, ataqueGUI, nome);
        
        posicionarGUI.setVisible(false);
        defesaGUI.setVisible(false);
        defesaGUI.atualizar();
        ataqueGUI.setVisible(false);
        ataqueGUI.atualizar();
        janelaJogo.setVisible(false);
      
        
    }

    public String getNome() {
        return nome;
    }

    public Tabuleiro getGrelhaDeDefesa() {
        return grelhaDeDefesa;
    }
    public TabuleiroGUI getDefesaGUI() {
        return defesaGUI;
    }
    public TabuleiroGUI getAtaqueGUI() {
        return ataqueGUI;
    }
    public JanelaJogo getJanelaJogo() {
        return janelaJogo;
    }
    
    public Tabuleiro getGrelhaDeAtaque() {
        return grelhaDeAtaque;
    }
    public PosicionarNaviosGUI getPosicionarGUI() {
        return posicionarGUI;
    }
    

    public Navio[] getNavios() {
        return navios;
    }
    
    public void incrementarVitorias() {
        this.numVitorias++;
    }
    
  


    public void posicionarNavios() {
        janelaJogo.setVisible(true);
        JPanel panel = new JPanel(new GridLayout(size, size));
        JButton[][] buttons = new JButton[size][size];
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                JButton button = new JButton();
                button.setPreferredSize(new Dimension(50, 50));
                button.addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent e) {
                        for (int k = 0; k < size; k++) {
                            for (int l = 0; l < size; l++) {
                                if (e.getSource() == buttons[k][l]) {
                                    posicionarNavio(k, l);
                                    return;
                                }
                            }
                        }
                    }
                });
                buttons[i][j] = button;
                panel.add(button);
            }
        }
        JOptionPane.showMessageDialog(null, panel, "Posicionar navios", JOptionPane.PLAIN_MESSAGE);
        janelaJogo.setVisible(false);
    }
    

    public void posicionarNavio(int x, int y) {
        for (int i = 0; i < navios.length; i++) {
            Navio navio = navios[i];
            if (!naviosPosicionados[i]) {
                boolean inputValido = false;
                boolean vertical = false;
                while (!inputValido) {
                    //grelhaDeDefesa.printTabuleiro();
                    String[] options = {"Sim", "Não"};
                    int verticalInt = JOptionPane.showOptionDialog(null, "Vertical?:", "Posicionar navio", JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
                    if (verticalInt == -1) {
                        continue;
                    }
                    vertical = verticalInt == 0 ? true : false;
                    if (verificarDisponibilidade(grelhaDeDefesa, x, y, navio.getTamanho(), vertical, navio.getTipo())) {
                        navio.colocarNoTabuleiro(grelhaDeDefesa, x, y, vertical);
                        defesaGUI.atualizar();
                        naviosPosicionados[i] = true;
                        inputValido = true;
                    } else {
                        JOptionPane.showMessageDialog(null, "Posição inválida, tente novamente.");
                        return;
                    }
                }
                return;
            }
        }
        boolean todosNaviosPosicionados = true;
        for (boolean navioPosicionado : naviosPosicionados) {
            if (!navioPosicionado) {
                todosNaviosPosicionados = false;
                break;
            }
        }
        if (todosNaviosPosicionados) {
            JOptionPane.showMessageDialog(null, "Todos os navios foram posicionados!");
        }
    }



  
                    


    public boolean verificarDisponibilidade(Tabuleiro grelhaDeDefesa, int x, int y, int tamanho, boolean isVertical, String tipo) {
        if (isVertical) {
            if (x + tamanho > grelhaDeDefesa.getSize()) { 
            	// nao permite que o barco seja maior que o tabuleiro em x
                return false;
            }
            
            if (tipo.equals("Porta-Aviões")) { //"Porta-Aviões" possui regras de colocacao diferentes por conta de seu formato
                if (y + 1 > grelhaDeDefesa.getSize()) { // nao permite que o "Porta-Aviões" passe do tabuleiro
                    return false;
                }
                if (y - 1 < 0) { // nao permite que o "Porta-Aviões" passe do tabuleiro
                    return false;
                }
            }
            
            
            for (int i = x; i < x + tamanho; i++) { 
                if (grelhaDeDefesa.getGrelha()[i][y] != 0) { // varre a coordenada x + tamanho do navio verificando se há outro posicionado lá dado y
                    return false;
                }
            }
        } else {
            if (y + tamanho > grelhaDeDefesa.getSize()) { // nao permite que o barco seja maior que o tabuleiro em y
                return false;
            }
            if (tipo.equals("Porta-Aviões")) { //"Porta-Aviões" possui regras de colocacao diferentes por conta de seu formato
                if (x + 1 > grelhaDeDefesa.getSize()) { // nao permite que o "Porta-Aviões" passe do tabuleiro
                    return false;
                }
                if (x - 1 < 0) { // nao permite que o "Porta-Aviões" passe do tabuleiro
                    return false;
                }
           }
            for (int i = y; i < y + tamanho; i++) {
                if (grelhaDeDefesa.getGrelha()[x][i] != 0) { // varre a coordenada x + tamanho do navio verificando se há outro posicionado lá dado y
                    return false;
                }
            }
        }
        return true;
    } 
    public boolean colocarNavio(Navio navioAtual, int x, int y) {
        if (verificarDisponibilidade(grelhaDeDefesa, x, y, navioAtual.getTamanho(), true, navioAtual.getTipo())) {
            return true;
        } else if (verificarDisponibilidade(grelhaDeDefesa, x, y, navioAtual.getTamanho(), false, navioAtual.getTipo())) {
        	return true;
        } else {
            System.out.println("Não foi possível posicionar o navio nesta posição.");
            return false;
        }
    }
    
    public void posicionarNaviosPersonalizados(Navio [] naviosPersonalizados) {
        janelaJogo.setVisible(true);
        JPanel panel = new JPanel(new GridLayout(size, size));
        JButton[][] buttons = new JButton[size][size];
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                JButton button = new JButton();
                button.setPreferredSize(new Dimension(50, 50));
                button.addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent e) {
                        for (int k = 0; k < size; k++) {
                            for (int l = 0; l < size; l++) {
                                if (e.getSource() == buttons[k][l]) {
                                    posicionarNavioPersonalizado(k, l, naviosPersonalizados);
                                    return;
                                }
                            }
                        }
                    }
                });
                buttons[i][j] = button;
                panel.add(button);
            }
        }
        JOptionPane.showMessageDialog(null, panel, "Posicionar navios", JOptionPane.PLAIN_MESSAGE);
        janelaJogo.setVisible(false);
    }
    
    public void posicionarNavioPersonalizado (int x, int y, Navio[] naviosPersonalizados ) {
    	 janelaJogo.setVisible(true);
         for (int i = 0; i < naviosPersonalizados.length; i++) {
             Navio navioPersonalizado = naviosPersonalizados[i];
             if (!naviosPosicionados[i]) {
                 boolean inputValido = false;
                 boolean vertical = false;
                 while (!inputValido) {
                     //grelhaDeDefesa.printTabuleiro();
                     //System.out.println("Insira a posição inicial para o navio " + navioPersonalizado.getTipo() + " (tamanho: " + navioPersonalizado.getTamanho() + ")");
                     
                     //System.out.print("Linha: ");
                	 String[] options = {"Sim", "Não"};
                     int verticalInt = JOptionPane.showOptionDialog(null, "Vertical?:", "Posicionar navio", JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
                     if (verticalInt == -1) {
                         continue;
                     }
                     vertical = verticalInt == 0 ? true : false;
                     
                     if (verificarDisponibilidade(grelhaDeDefesa, x, y, navioPersonalizado.getTamanho(), vertical, navioPersonalizado.getTipo())) {
                     	navioPersonalizado.colocarNoTabuleiro(grelhaDeDefesa, x, y, vertical);
                     	defesaGUI.atualizar();
                        naviosPosicionados[i] = true;
                        inputValido = true;
                    } else {
                        JOptionPane.showMessageDialog(null, "Posição inválida, tente novamente.");
                        return;
                    }
                }
                return;
            }
        }
        boolean todosNaviosPosicionados = true;
        for (boolean navioPosicionado : naviosPosicionados) {
            if (!navioPosicionado) {
                todosNaviosPosicionados = false;
                break;
            }
        }
        if (todosNaviosPosicionados) {
            JOptionPane.showMessageDialog(null, "Todos os navios foram posicionados!");
        }
    }
    

	public int getSize() {
		return size;
	}
}

